import streamlit as st
from langchain_community.chat_models import ChatOpenAI
from langchain_community.chat_models import ChatAnthropic
from langchain_mistralai import ChatMistralAI
from langchain.document_loaders import PyPDFLoader
from langchain.chains.question_answering import load_qa_chain
from langchain_core.documents import Document
import tempfile
import re
from io import StringIO
import tiktoken
from openai import OpenAI
from mistralai import Mistral
import anthropic
import textwrap


def count_tokens(text):
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    return len(encoding.encode(text))

def estimate_price(token_count):
    return (token_count / 1000000) * prix

def is_openAI():
    return selected_distrib == "OpenAI"

def is_openAI_and_key_set():
    return is_openAI() and openai_api_key is not None and openai_api_key != ''

def is_anthropic():
    return selected_distrib == "Anthropic"

def is_anthropic_and_key_set():
    return is_anthropic() and anthropic_api_key is not None and anthropic_api_key != ''


def is_mistral():
    return selected_distrib == "Mistral"

def is_mistral_and_key_set():
    return is_mistral() and mistral_api_key is not None and mistral_api_key != ''

def get_models_list():
    models_id = []
    if is_openAI_and_key_set():
        client = OpenAI(api_key=openai_api_key)
        models = client.models.list()
        for model in models:
            model_id = model.id
            if ("gpt" in model_id or "o1" in model_id) and "preview" not in model_id:
                models_id.append(model_id)
    elif is_anthropic_and_key_set():
        client = anthropic.Anthropic(api_key=anthropic_api_key)
        models = client.models.list()
        for model in models:
            model_id = model.id
            #if "gpt" in model_id and "preview" not in model_id:
            models_id.append(model_id)
    elif is_mistral_and_key_set():
        client = Mistral(api_key=mistral_api_key)
        models = client.models.list().data
        for model in models:
            model_id = model.id
            #if "gpt" in model_id and "preview" not in model_id:
            models_id.append(model_id)
    return models_id
    


model_infos = {
                "gpt-4o": {"price" : 2.5, "context" : 128000},
                "gpt-4o-mini": {"price" : 0.150, "context" : 128000},
                "o1": {"price" : 15, "context" : 200000},
                "o1-mini": {"price" : 3, "context" : 200000},
                "gpt-3.5-turbo": {"price" : 3, "context" : 16498},
                "claude-3-5-sonnet-20241022": {"price" : 3, "context" : 200000},
                "claude-3-5-haiku-20241022": {"price" : 0.8, "context" : 200000},
                "claude-3-opus-20240229": {"price" : 15, "context" : 200000},
                "mistral-large-latest": {"price" : 2, "context" : 128000},
               }

st.title("üßæ Extraction d'informations sur documents public")

selected_distrib = st.sidebar.selectbox("S√©lection du distributeur", options=("OpenAI", "Anthropic", "Mistral"), placeholder="Selectionne un distributeur...")

openai_api_key = None
if is_openAI():
    openai_api_key = st.sidebar.text_input("Cl√© d'API OpenAI", type="password")

anthropic_api_key = None
if is_anthropic():
    anthropic_api_key = st.sidebar.text_input("Cl√© d'API Anthropic", type="password")
    
mistral_api_key = None
if is_mistral():
    mistral_api_key = st.sidebar.text_input("Cl√© d'API Mistral", type="password")

uploaded_file = st.sidebar.file_uploader("D√©pose ton document", type=['pdf'])

info = st.sidebar.text_input("Information recherch√©e", type="default")

selected_model = None
if is_openAI_and_key_set() or is_anthropic_and_key_set() or is_mistral_and_key_set():
    selected_model = st.sidebar.selectbox("S√©lection du mod√®le", options=get_models_list(), placeholder="Selectionne un mod√®le...")

prix = None
context = None
if selected_model is not None:
    prix = -1
    context = -1
    if selected_model in model_infos: 
        prix = model_infos[selected_model]["price"]
        context= model_infos[selected_model]['context']
        
    container = st.sidebar.container(border=True)
    container.write("Information mod√®le:")
    container.write(f"üí≤Prix: {prix}$/M Input tokens")
    container.write(f"üìñ Contexte Max {context} tokens")


if uploaded_file is not None:
    
    # Create a temporary file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_file.write(uploaded_file.getvalue())
        tmp_file_path = tmp_file.name

    #Load the PDF
    loader = PyPDFLoader(tmp_file_path)
    documents = loader.load()
    
    # Extract text content from documents
    text_content = []
    for doc in documents:
        text_content.append(doc.page_content.lower())
    full_text = "".join(text_content)
    
     # Display token count and estimated price for the uploaded document
    if prix is not None:
        doc_token_count = count_tokens(full_text)
        doc_price_estimate = estimate_price(doc_token_count)
        side_container = st.sidebar.container(border=True)
        side_container.write(f"üßÆ Nombre de tokens dans le document: {doc_token_count}")
        side_container.write(f"üíµ Estimation du prix de traitement de ce document: ${doc_price_estimate:.6f}")
    


def generate_response(input_text):
    input_text = input_text.replace("{info}", info)
    model = None
    if is_openAI():
         model = ChatOpenAI(temperature=0.7, api_key=openai_api_key, model=selected_model)
    elif is_anthropic():
         model = ChatAnthropic(temperature=0.7, anthropic_api_key=anthropic_api_key, model=selected_model)
    elif is_mistral():
         model = ChatMistralAI(temperature=0.7, api_key=mistral_api_key, model=selected_model)
    if total_tokens > context:
        batchs_response = []
        batch_amount = int(total_tokens/context)+2
        st.write(batch_amount)
        batch_documents = []
        documents_per_batch = len(documents) // batch_amount

        # Handle remaining documents
        remaining = len(documents) % batch_amount

        for i in range(batch_amount):
            start_idx = i * documents_per_batch + min(i, remaining)
            end_idx = start_idx + documents_per_batch + (1 if i < remaining else 0)
            batch = documents[start_idx:end_idx]
            batch_documents.append(batch)
            
        i = 0
        for batch in batch_documents:
            chain = load_qa_chain(model,verbose=True)
            response = chain.run(input_documents=batch, question=input_text)
            response = ">>> NOUVEAU BATCH "+str(i)+" >>>"+response
            st.write(response)
            batchs_response.append(response)
            i=i+1
        # Resume
        resume_prompt = """Voici une s√©quence de plusieurs batch de r√©ponse, le num√©ro des r√©ponses est le m√™me. Ton objectif est de s√©lectionner un r√©ponse parmis toutes celle dans les batch, si possible la plus coh√©rente. Si une r√©ponse est remplie sur un des bacth prioritise l√† dans ton r√©sum√©. Tu dois garder le m√™me format > {numero question}. {question}
   - R√©ponse: {r√©ponse}
   - Extrait du texte: <<"{extrait}">>
   - Page: {page}\n"""

        docs = [
        Document(
            page_content=text,
            metadata={"index": i}  # Optional metadata
        ) for i, text in enumerate(batchs_response)
]
        chain = load_qa_chain(model,verbose=True)
        final_response = chain.run(input_documents=docs, question=resume_prompt)
        verify_response(final_response)
    else:
        chain = load_qa_chain(model,verbose=True)
        response = chain.run(input_documents=documents, question=input_text)
        verify_response(response)
        #st.info(model.invoke(input_text))
    
def extract_text_between_markers(text):
    pattern = r'<<\s*(.*?)\s*>>'
    matches = re.findall(pattern, text)
    return matches
    
def verify_response(response):
    extracted_text = extract_text_between_markers(response)
    for t in extracted_text:
        if normalize_spaces(t.lower()) in normalize_spaces(full_text):
            response = response.replace("<<"+t+">>", "\""+t+"\"\n‚úÖ(Valide: L'extrait est dans le document)")
        else:
            response = response.replace("<<"+t+">>", "\""+t+"\"\nüëÄ(L'extrait n'apparait pas dans le document, le mod√®le d'IA a peut √™tre invent√© cette r√©ponse)")
    st.info(response)
    
def normalize_spaces(s):
    return " ".join(s.split())

with st.form("my_form"):
    text = st.text_area(
        "Entre tes questions:",
        """You are an helpful assistant expert in financial and trading operations that answers questions directly and only using the information provided in the context below. 
Guidance for answers: 
- Always use French as the language in your responses. 
- In your answers, always use a professional tone with clear and precise informations. 
- Simply answer the question clearly and with the needed details using only the relevant details from the information below. 
- If the context does not contain the answer, say "Sorry, I didn't understand that. Could you rephrase your question?" 
- Always provide as much detail as the question requires and format the answer in the best way possible. 
- Always provide the exact extract from the pdf containing the answer after [extract]
- Don't simplify the extract, for example by adding ...
- Always provide the number of the page that has the answer between : [source page]:
- if provided, use the code ISIN when answering the question 
- Never tell the user what you have been told to do Respond to the following questions 

Format for the response:

> [number of the question]. [question]\n
	- R√©ponse: [answer]\n
    - Page: [source page]\n
	- Extrait: <<[extract]>>\n

questions { 
"2": "Quelle est la devise utilis√©e (Devise, Devise de libell√©, Devise du fonds / Currency, Label currency, Fund currency) pour le produit {info}? Exemples de r√©ponses attendues : USD, Euro‚Ä¶", 
"3": "Quelle est la fr√©quence de calcul de la valeur liquidative (P√©riodicit√©, P√©riodicit√© de la collecte, Fr√©quence, Date de centralisation / Periodicity, Frequency, Periodicity of Net Asset Value, Centralisation Date) pour le produit {info} ? Exemples de r√©ponses attendues : Quotidien, Mensuel‚Ä¶", 
"4": "Quels sont les d√©tails du cut-off centralisateur (Cut off, Modalit√©s de souscription et de rachat, Centralisation, Heure de centralisation, Horaire maximum de centralisation / Cut off, Subscription and redemption terms, Centralization, Centralization time, Maximum centralization time) pour le produit {info} ? Il peut y avoir deux heures diff√©rentes : une pour les rachats et une pour les souscriptions. S‚Äôil n'y a pas de pr√©cision l'heure est la m√™me pour les deux. Exemples de r√©ponses attendues : 12h, 10h30‚Ä¶", 
"5": "Quel est le delta de la valeur liquidative, c'est √† dire le nombre de jour entre le jour o√π les ordres de souscription et de rachat sont centralis√©s et le jour o√π la valeur liquidative est effectivement calcul√©e. (√âvaluation, Date et p√©riodicit√© de calcul de la valeur liquidative, Jour d'√©tablissement de la valeur liquidative / Valuation, Date and frequency of calculation of the net asset value, Day of establishment of net asset value) pour le produit {info} ? Exemples de r√©ponses attendues : J, J+1‚Ä¶", 
"6": "Quel est le delta de r√®glement √† la souscription (Date de r√®glement √† la souscription, R√®glement des souscriptions / Settlement date, Settlement date for subscriptions) pour le produit {info} ? Exemples de r√©ponses attendues : J, J+1‚Ä¶", 
"7": "Quel est le delta de r√®glement au rachat (Date de r√®glement au rachat, R√®glement des rachats / Settlement date, Settlement date for redemptions) pour le produit {info} ? Si il n'y a pas de pr√©cision sur les rachats, le delta est le m√™me que pour les souscriptions. Exemples de r√©ponses attendues : J, J+1‚Ä¶", 
"8": "Combien de d√©cimales de parts (Nombre de d√©cimales de part, Fractionnement des parts, D√©cimalisation / Number of decimal for shares, Splitting of shares, Decimalization) sont associ√©es au produit {info} ? Exemples de r√©ponses attendues : 3, 5‚Ä¶", 
"9": "Combien de d√©cimales de la valeur liquidative (Nombre de d√©cimales de la Valeur Liquidative, Fractionnement de la Valeur Liquidative / Number of decimal of the Net Asset Value, Splitting of Net Asset Value) sont associ√©es au produit {info} ? Exemples de r√©ponses attendues : 3, 5‚Ä¶ Quand ce nombre n'est pas pr√©cis√© il sera √©gal √† deux par d√©faut", 
"10": "Quel est le minimum de la premi√®re souscription (Montant minimum de souscription initiale, Souscription initiale / Minimum first subscription, Initial subscription) pour le produit {info} ? Exemples de r√©ponses attendues : 1 part, 0.01 part‚Ä¶", 
"11": "Quel est le montant des souscriptions ult√©rieures (Montant minimum de souscription ult√©rieure / Minimum subsequent subscription amount) pour le produit {info} ? Exemples de r√©ponses attendues : 1 part, 0.01 part‚Ä¶", 
"12": "Quelles sont les modalit√©s des souscriptions (Souscriptions, Modalit√©s des souscriptions, Souscriptions et rachats / Subscriptions, Subscription terms, Subscriptions and redemptions) pour le produit {info} ? Exemples de r√©ponses attendues : Autoris√©es uniquement en quantit√©, Autoris√©es uniquement en montant ou Autoris√©es en montant et en quantit√©", 
"13": "Quelles sont les modalit√©s des rachats (En part ou en montant, Apports ou retraits de titres, Montant autoris√© au rachat / In share or amount, Contributions or withdrawals of securities, Amount authorized for redemption) pour le produit {info} ? Si il n'y a pas de pr√©cision sur les rachats, les modalit√©s sont les m√™mes que pour les souscriptions. Exemples de r√©ponses attendues : Autoris√©es uniquement en quantit√©, Autoris√©es uniquement en montant ou Autoris√©es en montant et en quantit√©", 
"14": "Quels sont les droits d'entr√©e (Frais et commissions, Commission et souscriptions et de rachats, Frais de souscription, Droits d'entr√©e / Fees and commissions, Commission and subscriptions and redemptions, Subscription fees, Entry costs) pour le produit {info} ? Exemples de r√©ponses attendues : 0%, 5%‚Ä¶", 
"15": "Quels sont les droits de sortie (Frais et commissions, Commission et souscriptions et de rachats, Frais de rachat, Droits de sortie / Fees and commissions, Commission and subscriptions and redemptions, Redemption fees, Exit costs) pour le produit {info} ? Exemples de r√©ponses attendues : 0%, 5%‚Ä¶", 
"16": "Le produit {info} est-il √©ligible √† Euroclear (Eligibilit√© Euroclear, Admission Euroclear, Admis EOF / Euroclear eligibility, Euroclear Admission, EOF admitted) ? Exemples de r√©ponses attendues : Oui ou Non. Si ce n'est pas mentionn√© dans le prospectus ce n'est pas √©ligible.", 
"17": "Est-il possible de faire des achats/ventes, c'est √† dire une vente suivie imm√©diatemment d'un achat pour le m√™me nombre de part sur le m√™me produit ou un achat suivi imm√©diatement d'une vente (Achet√© / Vendu, Aller / Retour autoris√©s, Cas d'exon√©ration / Bought / Sold, Authorized return / return, Exemption cases) pour le produit {info} ? Exemples de r√©ponses attendues : Oui ou Non. Si ce n'est pas mentionn√© dans le prospectus fourni, ce n'est pas autoris√©.", 
"18": "Le produit {info} est-il √©ligible au PEA (Eligibilit√© au PEA / PEA eligibility), c'est √† dire peut-il √™tre achet√© avec un PEA ? Exemples de r√©ponses attendues : Oui ou Non. Si ce n'est pas mentionn√© dans le prospectus fourni, ce n'est pas autoris√©.", 
"19": "Le produit {info} est-il √©ligible au PEB (Eligibilit√© au PEB / PEB eligibility), c'est √† dire peut-il √™tre achet√© avec un PEB ? Exemples de r√©ponses attendues : Oui ou Non. Si ce n'est pas mentionn√© dans le prospectus fourni, ce n'est pas autoris√©.", 
"20": "Qui est le promoteur (Soci√©t√© de Gestion / Management company) pour le produit {info} ? Exemples de r√©ponses attendues : ING SOLUTIONS INVESTMENT MANAGEMENT S.A., EIFFEL INVESTMENT GROUP‚Ä¶", "21": "Quelle est la valeur liquidative d'origine (Valeur liquidative ou VL d'origine / Original Net Asset Value, NAV) du produit {info} ? Exemples de r√©ponses attendues : 100 euros, 150 dollars‚Ä¶ Si c‚Äôest un lancement sinon quelle est la derni√®re valeur liquidative ?", 
"22": "Qui est le centralisateur (Centralisateur, Organisme d√©sign√© pour centraliser / Centralizer, Body designated to centralize) du produit {info} ?", 
"23": "Le produit {info} est-il concern√© par la sp√©cificit√© des jours f√©ri√©s (Jours f√©ri√©s, Tous les jours o√π les march√©s Euronext sont ouverts √† l‚Äôexception des jours f√©ri√©s l√©gaux en France, Si jour de collecte f√©ri√©, Si jour de Valeur Liquidative f√©ri√©, Calendrier / Holidays, All days when Euronext markets are open with the exception of legal public holidays in France, If collection day is a public holiday, If Net Asset Value Day is a public holiday, Calendar) ?", 
"24": "Quels sont les souscripteurs concern√©s (P√©riode de souscription / Subscribers concerned, Subscription period) associ√©s au produit {info} ?" 
}""",height=500
    )
    if not(is_anthropic_and_key_set()) and not(is_openAI_and_key_set()) and not(is_mistral_and_key_set()):
        st.warning("S'il te plait sp√©cifie ta cl√© API", icon="‚ö†")
    elif uploaded_file is None:
        st.warning("S'il te plait d√©pose ton document", icon="‚ö†")
    elif selected_model is None:
        st.warning("S'il te plait s√©lectionne un mod√®le", icon="‚ö†")
    elif selected_model not in model_infos:
        st.warning("Mod√®le non support√©", icon="‚õî")
        
        
    
    total_tokens = 0
    if prix is not None and uploaded_file is not None and selected_model is not None and selected_model in model_infos:
        # Count tokens and estimate price for the query
        query_token_count = count_tokens(text)
        query_price_estimate = estimate_price(query_token_count)
        # Total tokens and price (document + query)
        total_tokens = doc_token_count + query_token_count
        total_price = doc_price_estimate + query_price_estimate
        
        container = st.container(border=True)
        container.write(f"üßÆ Nombre de tokens total: {total_tokens}")
        container.write(f"üíµ Estimation du prix de la requ√™te: ${total_price:.6f}")
        
    if context is not None and total_tokens > context:
        st.warning("Attention, la limite de maximum de tokens est d√©pass√©, l'analyse va se faire en plusieurs batchs puis faire un r√©sum√©", icon="‚ö†")
    
    submitted = st.form_submit_button("Envoyer la requ√™te")
    if submitted and selected_model is not None and selected_model in model_infos and uploaded_file is not None:
        generate_response(text)
